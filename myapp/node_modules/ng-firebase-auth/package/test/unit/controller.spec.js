describe('Controller', function() {
  'use strict';

  var ctrl, firebase;

  beforeEach(function() {
    firebase = {
      ref:  {
        authWithCustomToken: jasmine.createSpy('authWithCustomToken'),
      },
      auth: {
        $authWithOAuthPopup: jasmine.createSpy('$authWithOAuthPopup')
      }
    };
    angular.mock.module('ngFirebaseAuth');

    angular.mock.inject(function($controller, $rootScope, $q) {
      firebase.ref.authWithCustomToken.and.returnValue($q.defer().promise);
      firebase.auth.$authWithOAuthPopup.and.returnValue($q.defer().promise);
      ctrl = $controller('AuthCtrl', {
        $scope: {
          firebase: firebase
        }
      });
    });
  });

  afterEach(function() {
    ctrl =
    firebase = undefined;
  });

  describe('.onAuthButtonClick()', function() {
    it('should call firebase.auth.$authWithOAuthPopup with provider', function() {
      ctrl.onAuthButtonClick('foo');
      expect(firebase.auth.$authWithOAuthPopup).toHaveBeenCalledWith('foo');
    });
  });

  describe('.onAuthentication()', function() {
    it('should call firebase.auth.authWithCustomToken with token', function() {
      ctrl.onFirebaseAuth = 'onFirebaseAuth';
      ctrl.onAuthentication({token: 'foo'});
      expect(firebase.ref.authWithCustomToken)
        .toHaveBeenCalledWith('foo', 'onFirebaseAuth');
    });
  });

  describe('.onFirebaseAuth()', function() {
    it('should handle error', function() {
      spyOn(ctrl, 'onFirebaseAuthError');
      ctrl.onFirebaseAuth('foo');
      expect(ctrl.onFirebaseAuthError).toHaveBeenCalledWith('foo');
    });
  });
});
